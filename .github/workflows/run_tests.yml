name: Run pytest

on:
  push:
  pull_request:
    types: [opened, reopened, synchronize]

env:
  POSTGRES_DB: tsdb
  POSTGRES_USER: pguser
  POSTGRES_PASSWORD: pgpass
  POSTGRES_PORT: 5432
  POSTGRES_HOST: localhost

jobs:
  build:
    # if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.ref != 'main')
    # if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    services:
      postgres:
        image: timescale/timescaledb-ha:pg15@sha256:8cc3fd787794a9cea269a1643569d8ab8d1162bfcba46364a327ab47df60ffdf
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_PORT: ${{ env.POSTGRES_PORT }}
          POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5 --name=service_postgresql

    steps:
      # - name: Install PostGIS
      #   run: |
      #     set -x
      #     docker exec -u root service_postgresql /bin/sh -c "apk --no-cache add postgis"

      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Create TABLE_NAME variable
        run: |
          TABLE_NAME="conditions_ci_${{ matrix.python-version }}"
          TABLE_NAME=${TABLE_NAME//./_}
          echo "Table name is $TABLE_NAME"
          echo "TABLE_NAME=$TABLE_NAME" >> $GITHUB_ENV

      - name: Execute DB setup script
        continue-on-error: false # stop the workflow if this step fails
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
          TABLE_NAME: ${{ env.TABLE_NAME }}
        run: |
          set -e
          psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER -d $POSTGRES_DB -f db/create_table_and_roles.sql  -v table_name=$TABLE_NAME --set ON_ERROR_STOP=on
          if [ $? -ne 0 ]; then
            echo "psql command failed"
            exit 1
          fi

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4
        with:
          python-version: ${{ matrix.python-version }}
      # - name: Install OS dependencies
      #   run: |
      #     DEBIAN_FRONTEND=noninteractive apt update
      #     DEBIAN_FRONTEND=noninteractive apt install curl
      - uses: snok/install-poetry@93ada01c735cc8a383ce0ce2ae205a21c415379b # v1
        with:
          version: 1.6.1 # pin the version as they keep changing their APIs
          virtualenvs-create: false
          virtualenvs-in-project: false

      - name: Install dependencies
        run: |
          python -m venv venv
          . venv/bin/activate
          poetry install --with test --without dev  --no-interaction --no-root --sync
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          python  -c "import os; print(os.environ['VIRTUAL_ENV'])"

      - name: Lint with flake8
        run: |
          . venv/bin/activate
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        env:
          DOTENV_KEY: ${{ secrets.DOTENV_KEY }}
          TABLE_NAME: ${{ env.TABLE_NAME }}
          POSTGRES_USER: ${{ format('{0}_writer_user', env.TABLE_NAME) }}
          POSTGRES_PASSWORD: ${{ format('{0}_writer_user', env.TABLE_NAME) }}
        run: |
          . venv/bin/activate
          pytest --cov-report=xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
